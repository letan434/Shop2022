// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eShopSolution.Data.EF;

namespace eShopSolution.Data.Migrations
{
    [DbContext(typeof(EShopDbContext))]
    partial class EShopDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("AppUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            RoleId = new Guid("8d04dce2-969a-435d-bba4-df3f325983dc")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserTokens");
                });

            modelBuilder.Entity("eShopSolution.Data.Entities.AppConfig", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.ToTable("AppConfigs");

                    b.HasData(
                        new
                        {
                            Key = "HomeTitle",
                            Value = "This is home page of EKunShop"
                        },
                        new
                        {
                            Key = "HomeKeyword",
                            Value = "This is keyword of EKunShop"
                        },
                        new
                        {
                            Key = "HomeDescription",
                            Value = "This is description of EKunShop"
                        });
                });

            modelBuilder.Entity("eShopSolution.Data.Entities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8d04dce2-969a-435d-bba4-df3f325983dc"),
                            ConcurrencyStamp = "546ab93c-1c35-416b-aa59-9f8f8bae9ced",
                            Description = "Administrator role",
                            Name = "admin",
                            NormalizedName = "admin"
                        });
                });

            modelBuilder.Entity("eShopSolution.Data.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("69bd714f-9576-45ba-b5b7-f00649be00de"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9d8921ec-83fa-4eb1-a78c-25c8095715da",
                            Dob = new DateTime(1998, 3, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin14399@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "Shop",
                            LockoutEnabled = false,
                            NormalizedEmail = "admin14399@gmail.com",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAEAACcQAAAAEDQT02jlM8kZqt6YY8kixOw0T2LvEOcE4kyv1e8hpBx9Bn76ZUyWp/eeb7aRcVtPuA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("eShopSolution.Data.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("eShopSolution.Data.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsShowOnHome")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("SeoAlias")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("SeoDescription")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("SeoTitle")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsShowOnHome = true,
                            Name = "Guitar & Bass",
                            SeoAlias = "guitar-bass",
                            SeoDescription = "Guitar và Bass là phần chính yếu của cửa hàng trong nhiều thập kỷ, và chúng tôi sở hữu danh sách không ngừng nối dài các sản phẩm guitar electric và acoustic, bass từ các thương thiệu Ibanez, Gibson, Epiphone, Martin, PRS, Sterling, Heritage, Ernie Ball,...! Có cả trọn bộ dành cho người mới bắt đầu để nuôi dưỡng ngôi sao rock tương lai sẽ khuấy đảo sân khấu!",
                            SeoTitle = "Guitar & Bass",
                            SortOrder = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            IsShowOnHome = true,
                            Name = "Trống và bộ gõ",
                            SeoAlias = "trong-bogo",
                            SeoDescription = "Thể loại nhạc bạn đang theo đuổi sẽ không còn là vấn đề. Các tay trống sẽ luôn cần trụ cột cho band nhạc của mình. Khám phá trang thiết bị hoàn hảo, hoặc thiết lập bộ trống riêng từ nhiều lựa chọn trống và phụ kiện trong bộ sưu tập Trống & Bộ gõ của Swee Lee! Dùi trống, Mặt trống, Trống Snare, Bao đựng dùi, Cajons, Trống Acoustic và Trống điện, Tambourines và cả Practice Pads đều có đủ!",
                            SeoTitle = "Trống và bộ gõ",
                            SortOrder = 2,
                            Status = 1
                        });
                });

            modelBuilder.Entity("eShopSolution.Data.Entities.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("eShopSolution.Data.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShipAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ShipEmail")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ShipName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ShipPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("eShopSolution.Data.Entities.OrderDetail", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("eShopSolution.Data.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BodyType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("FaceMaterial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FinishBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GuitarString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HardwareFinish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Horses")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InlaysFaceNeed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<string>("LockSet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("NeckShape")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NeedleCurvature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumberofKeys")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("OriginalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Pickguard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pickups")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ScaleLength")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeoAlias")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("SeoDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeoTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Stock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("TrunkWood")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ViewCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BodyType = "Jazzmaster®",
                            DateCreated = new DateTime(2022, 11, 7, 10, 27, 24, 383, DateTimeKind.Local).AddTicks(4750),
                            Description = "Paranormal Offset Telecaster® là một sự kết hợp tinh tế những tính năng tuyệt vời của guitar Fender, kết hợp các yếu tố của Tele® mang tính biểu tượng với phong cách và sự thoải máu của thân đàn offset Jazzmaster®. Sở hữu cặp pickup single-coil alnico do Fender thiết kế và ngựa đàn string-through-body, chất âm linh hoạt của mẫu guitar này sẽ cất tiếng với sustain. Những đặc điểm khác bao gồm cần đàn kiểu slim “C” với finish gloss cho cảm giác bóng bẩy và hardware bằng chrome để toả sáng dưới ánh đèn sân khấu.",
                            Details = "Squier Paranormal Series Offset Telecaster Electric Guitar, Butterscotch Blonde",
                            FaceMaterial = "Maple",
                            FinishBody = "Gloss Polyurethane",
                            GuitarString = "Nickel Plated Steel (.009-.042 Gauges)",
                            HardwareFinish = "Chrome",
                            Horses = "3-Saddle Vintage-Style Strings-Through-Body Tele® with Chrome Barrel Saddles",
                            InlaysFaceNeed = "Black Dot",
                            LockSet = "Kiểu cổ điển",
                            Name = "Squier Paranormal Series Offset Telecaster Electric Guitar, Butterscotch Blonde",
                            NeckShape = "Kiểu 'C''",
                            NeedleCurvature = "9.5”(241 mm)",
                            NumberofKeys = "22 Narrow Tall",
                            OriginalPrice = 9440000m,
                            Pickguard = "4-Ply Tortoiseshell",
                            Pickups = "Fender® Designed Alnico Single-Coil (Bridge), Fender® Designed Alnico Single-Coil (Neck) ",
                            Price = 11440000m,
                            ScaleLength = "24,75” (629 mm) ",
                            SeoAlias = "Squier Paranormal Series Offset Telecaster Electric Guitar, Butterscotch Blonde",
                            SeoDescription = "Squier Paranormal Series Offset Telecaster Electric Guitar, Butterscotch Blonde",
                            SeoTitle = "Squier Paranormal Series Offset Telecaster Electric Guitar, Butterscotch Blonde",
                            Stock = 4,
                            TrunkWood = "Poplar",
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 2,
                            BodyType = "Jazzmaster®",
                            DateCreated = new DateTime(2022, 11, 7, 10, 27, 24, 393, DateTimeKind.Local).AddTicks(6000),
                            Description = "Paranormal Offset Telecaster® là một sự kết hợp tinh tế những tính năng tuyệt vời của guitar Fender, kết hợp các yếu tố của Tele® mang tính biểu tượng với phong cách và sự thoải máu của thân đàn offset Jazzmaster®. Sở hữu cặp pickup single-coil alnico do Fender thiết kế và ngựa đàn string-through-body, chất âm linh hoạt của mẫu guitar này sẽ cất tiếng với sustain. Những đặc điểm khác bao gồm cần đàn kiểu slim “C” với finish gloss cho cảm giác bóng bẩy và hardware bằng chrome để toả sáng dưới ánh đèn sân khấu.",
                            Details = "Squier Paranormal Series Offset Telecaster Electric Guitar, Olympic White",
                            FaceMaterial = "Maple",
                            FinishBody = "Gloss Polyurethane",
                            GuitarString = "Nickel Plated Steel (.009-.042 Gauges)",
                            HardwareFinish = "Chrome",
                            Horses = "3-Saddle Vintage-Style Strings-Through-Body Tele® with Chrome Barrel Saddles",
                            InlaysFaceNeed = "Black Dot",
                            LockSet = "Kiểu cổ điển",
                            Name = "Squier Paranormal Series Offset Telecaster Electric Guitar, Olympic White",
                            NeckShape = "Kiểu 'C''",
                            NeedleCurvature = "9.5”(241 mm)",
                            NumberofKeys = "22 Narrow Tall",
                            OriginalPrice = 9440000m,
                            Pickguard = "4-Ply Tortoiseshell",
                            Pickups = "Fender® Designed Alnico Single-Coil (Bridge), Fender® Designed Alnico Single-Coil (Neck) ",
                            Price = 11440000m,
                            ScaleLength = "24,75” (629 mm) ",
                            SeoAlias = "Squier Paranormal Series Offset Telecaster Electric Guitar, Olympic White",
                            SeoDescription = "Squier Paranormal Series Offset Telecaster Electric Guitar, Olympic White",
                            SeoTitle = "Squier Paranormal Series Offset Telecaster Electric Guitar, Olympic White",
                            Stock = 5,
                            TrunkWood = "Poplar",
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 3,
                            BodyType = "Jazzmaster®",
                            DateCreated = new DateTime(2022, 11, 7, 10, 27, 24, 393, DateTimeKind.Local).AddTicks(6290),
                            Description = "Latin Percussion LP1433 Angled Cajon có mặt đánh góc cạnh thiết kế công thái học giúp dễ thao tác hơn. Mặt trước góc cạnh đặt bề mặt chơi gần tay của bạn ở vị trí tự nhiên hơn khi chạm xuống bảng âm. Mang cấu trúc hoàn toàn bằng gỗ và 3 dây snare bên trong tăng độ nhạy và sự biểu đạt, có mặt ghế ngồi kết cấu chống trượt.",
                            Details = "Latin Percussion LP1433 Angled Surface Cajon",
                            FaceMaterial = "Maple",
                            FinishBody = "Gloss Polyurethane",
                            GuitarString = "Nickel Plated Steel (.009-.042 Gauges)",
                            HardwareFinish = "Chrome",
                            Horses = "3-Saddle Vintage-Style Strings-Through-Body Tele® with Chrome Barrel Saddles",
                            InlaysFaceNeed = "Black Dot",
                            LockSet = "Kiểu cổ điển",
                            Name = "Latin Percussion LP1433 Angled Surface Cajon",
                            NeckShape = "Kiểu 'C''",
                            NeedleCurvature = "9.5”(241 mm)",
                            NumberofKeys = "22 Narrow Tall",
                            OriginalPrice = 4000000m,
                            Pickguard = "4-Ply Tortoiseshell",
                            Pickups = "Fender® Designed Alnico Single-Coil (Bridge), Fender® Designed Alnico Single-Coil (Neck) ",
                            Price = 6740000m,
                            ScaleLength = "24,75” (629 mm) ",
                            SeoAlias = "Latin Percussion LP1433 Angled Surface Cajon",
                            SeoDescription = "Latin Percussion LP1433 Angled Surface Cajon",
                            SeoTitle = "Latin Percussion LP1433 Angled Surface Cajon",
                            Stock = 7,
                            TrunkWood = "Poplar",
                            ViewCount = 0
                        });
                });

            modelBuilder.Entity("eShopSolution.Data.Entities.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Caption")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("eShopSolution.Data.Entities.ProductInCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductInCategories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            ProductId = 1
                        });
                });

            modelBuilder.Entity("eShopSolution.Data.Entities.Promotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("ApplyForAll")
                        .HasColumnType("bit");

                    b.Property<decimal?>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("DiscountPercent")
                        .HasColumnType("int");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductCategoryIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Promotions");
                });

            modelBuilder.Entity("eShopSolution.Data.Entities.Slide", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Slides");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "",
                            Image = "/themes/images/carousel/1.png",
                            Name = "",
                            SortOrder = 1,
                            Status = 1,
                            Url = "#"
                        },
                        new
                        {
                            Id = 2,
                            Description = "",
                            Image = "/themes/images/carousel/2.jpg",
                            Name = "",
                            SortOrder = 2,
                            Status = 1,
                            Url = "#"
                        },
                        new
                        {
                            Id = 3,
                            Description = "",
                            Image = "/themes/images/carousel/3.jpg",
                            Name = "",
                            SortOrder = 3,
                            Status = 1,
                            Url = "#"
                        },
                        new
                        {
                            Id = 4,
                            Description = "",
                            Image = "/themes/images/carousel/4.jpg",
                            Name = "",
                            SortOrder = 4,
                            Status = 1,
                            Url = "#"
                        },
                        new
                        {
                            Id = 5,
                            Description = "",
                            Image = "/themes/images/carousel/5.jpg",
                            Name = "",
                            SortOrder = 5,
                            Status = 1,
                            Url = "#"
                        },
                        new
                        {
                            Id = 6,
                            Description = "",
                            Image = "/themes/images/carousel/6.png",
                            Name = "",
                            SortOrder = 6,
                            Status = 1,
                            Url = "#"
                        });
                });

            modelBuilder.Entity("eShopSolution.Data.Entities.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ExternalTransactionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Fee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Provider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Result")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("eShopSolution.Data.Entities.Cart", b =>
                {
                    b.HasOne("eShopSolution.Data.Entities.Product", "Product")
                        .WithMany("Carts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eShopSolution.Data.Entities.AppUser", "AppUser")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eShopSolution.Data.Entities.Order", b =>
                {
                    b.HasOne("eShopSolution.Data.Entities.AppUser", "AppUser")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eShopSolution.Data.Entities.OrderDetail", b =>
                {
                    b.HasOne("eShopSolution.Data.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eShopSolution.Data.Entities.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eShopSolution.Data.Entities.ProductImage", b =>
                {
                    b.HasOne("eShopSolution.Data.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eShopSolution.Data.Entities.ProductInCategory", b =>
                {
                    b.HasOne("eShopSolution.Data.Entities.Category", "Category")
                        .WithMany("ProductInCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eShopSolution.Data.Entities.Product", "Product")
                        .WithMany("ProductInCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eShopSolution.Data.Entities.Transaction", b =>
                {
                    b.HasOne("eShopSolution.Data.Entities.AppUser", "AppUser")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
